const c14 = require("c14")


let config = {
    key_rsa : `-----BEGIN RSA PRIVATE KEY-----
            MIIBOQIBAAJBAIXK5E64jbb9y5kkenKzlKEVGe5u5Nf2BqluhStgT79maH77Wbwk
            qP+PUu7MHGZBKxW25EeSsQtZk8VpLTarmmMCAwEAAQJAROoOEVJUhKZToc09WSmQ
            7CvvUHZEX8z0/37TD1Wrnh1EKl/VXh0qb+UlwpSvGo8qRuFXspspKZLXlIfinRLI
            IQIhANV0FT7q/KLOZk1Rg7jbdpQDWiEyyDopnbvLSRNHTbnRAiEAoHXxCOHWFD53
            DWWxB6hCXe+7GvnFg5gLNHqoERm16fMCIDAq6uRw2KPQmctW2rerZp3OB9e4AvEF
            FSAcppfgHk0RAiBC116EuK6Y2Dx3lDjeW7TptIdYgVtJqfhg8Ac6uF8TCQIgEnig
            ManyfCnbAaxz1DRIrWGnRElxm4QtOnKPe9gRQFo=
            -----END RSA PRIVATE KEY-----`,
    key_bsv : "L4tDqjSfQ22xhf5RFTD4dDpaQRnRwdPuhJZp1RNLyyBknkX8AZ4R"
}


c14.init(config);

c14.prepare_media("./media/src/final.mp4")
.then(video_obj=>{
    return c14.create_frame_sig_hash(video_obj)
})
.then(data=>{
    return c14.build_op_return_payload(data)
})
.then(op_return_payload=>{
    return c14.op_return_push(op_return_payload)
})
.then(txid=>{
    console.log("transaction id : "+txid)
})
.catch(e=>{
    console.log(e)
})





/*

The protocol


what is c14 ? 

c14 is a op_return protocol on top of bsv core protocol for creating immutable referncce points of mulitmedia files.

the problem - 

As advancement in Artifical Intellegince contnuing in  somewhat an exponential rate, we are witnessing a new type of fake contents being circulated which are indistinguishable from the real ones to the naked eye. With new breakthough in the area of machine learning and artificial intelligence, new tools are being created which in turn creating an influx of fake contents. The intentions behind these fake contents could include creating memes,pushing certain agendas among the masses by certain groups or simply as an act of personal conflict. Our current legal system is not equipt with effectively dealing with such types of issues and soon the legal sysem will require some drastic changes in order to deal with such issues.

The solution - 

 One way to deal with this is to cryptographicaly sign each frame in a video and put the signature along with the file metadata in the immutable ledger called blockchain. This could act a immutable point of refference which could be presented within the legal framework to dispute issues related to fake contents.




payload generation rule : 
1. Each video file is splitted into individual frames in jpg format.
2. Each frame is converted to binary form and signed with Owner's private key and converted to a base64 string
3. Each frame signature string is then concatenate to a single string. Each frame signature string is separed by the delimeter  "_$_".
4. The frame signature string then hashed with SHA256 which generates the frame_buffer_sig_hash
5. The frame_buffer_sig_hash is then added to the file metadata and the file metadata is signed with owner's private key and the signature is then added as a key in the payload json object.
6. protocol version number is defined in the payload object.
7. In the final step payload is serialized into a base64 string.


cyrptography rules - 
2. All hashing operations ared done with SHA256 hashing algorithm to be considered valid
3. All signatures used must be signed with the key generated by the rsa2048 algorithm to be considered valid.

payload data structure rule
1. A op_return payload has two components - a. The protocol prefix b. payload string

payload data structure rule


data structure of a deserialized json payload  -

{

   version : <version>
   sig : <signature generted by signing the metadata with owner's private key>
   
   metadata : {   ...{file metadata}
                  frame_sig_hash: <frame_buffer_sig_hash> 
                  
                }

}




collision rule
1. if multiple identical records are found in a block, the lowest topological ordered tx is considered valid




*/